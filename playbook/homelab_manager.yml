---
- name: Updating System
  hosts: homelab
  strategy: free
  tasks:
    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

    - name: Updating Ubuntu Apt Cache
      become: yes
      apt:
        update_cache: yes
        force_apt_get: yes

    - name: Upgrading Ubuntu
      become: yes
      apt:
        upgrade: full

- name: Installing Ubuntu Dependencies
  hosts: homelab
  strategy: free
  tasks:
    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

    - name: Adding Main Repository
      become: yes
      shell: sudo apt-add-repository --yes main
      
    - name: Updating Ubuntu Apt Cache
      become: yes
      apt:
        update_cache: yes
        force_apt_get: yes

    - name: Installing Ubuntu Dependencies
      become: yes
      apt: 
        name:
          - dos2unix
          - wget
          - curl
          - git
          - python3
          - python3-pip
          - python-is-python3
          - atomicparsley
          - ffmpeg
          - gparted
          - jq
          - unzip
          - tmux
          - ca-certificates
          - gnupg
          - lsb-release
          - trash-cli
          - lm-sensors
          - ipmitool
          - gcc
          - rustc
          - libasound-dev 
          - portaudio19-dev 
          - libportaudio2 
          - libportaudiocpp0
          - apt-transport-https
          - software-properties-common
          - qt5-qmake
          - pandoc
        state: present

- name: Installing Python Dependencies
  hosts: poweredge
  strategy: free
  tasks:
    - name: Installing Python Dependencies
      become: yes
      ansible.builtin.pip:
        name: 
          - pip
          - geniusbot
          - ansible
          - repository-manager
          - systems-manager
          - media-manager
          - media-downloader
          - gitlab-api
          - servicenow-api
          - cockpit-api
          - genius-chatbot
#          - report-manager
          - subshift
          - webarchiver 
          - listmonk-api
          - audio-transcriber
          - barchart-api
        extra_args: --upgrade

- name: Cloning Repositories
  hosts: poweredge
  strategy: free
  tasks:
    - name: Checking if Docker is Already Installed
      shell: if [[ -d "{{ directory }}/automation" ]]; then echo "true"; fi
      register: automation_cloned

    - name: Create a directory if it does not exist
      become: yes
      ansible.builtin.file:
        path: "{{ directory }}"
        state: directory
        mode: '0755'
      when: automation_cloned == "true"

    - name: Cloning Automation Repository
      become: yes
      ansible.builtin.git:
        repo: https://github.com/Knuckles-Team/automation.git
        dest: "{{ directory }}/automation"
      when: automation_cloned == "true"
      
    - name: Adding Development as Safe Directory
      become: yes
      shell: git config --global --add safe.directory "{{ directory }}/*"

    # - name: Cloning Remaining Repositories
    #   become: yes
    #   shell: repository-manager -d "{{ directory }}" -f "{{ directory }}/automation/repositories.txt" -c -p -b

    # - name: Adding Remaining Development Repositories as Safe Directories
    #   become: yes
    #   shell: git config --global --add safe.directory "{{ directory }}/*"

- name: Installing Ubuntu Server Dependencies
  hosts: poweredge
  strategy: free
  tasks:
    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

    - name: Installing Ubuntu Server Dependencies
      become: yes
      apt: 
        name:  
          - cpu-checker
          - qemu-kvm 
          - qemu-efi
          - virt-manager 
          - libvirt-daemon-system 
          - virtinst 
          - libvirt-clients 
          - bridge-utils
          - lm-sensors 
          - ipmitool
          - virtualbox
        state: present

    - name: Giving KVM Access to Ansible
      become: yes
      shell:  sudo usermod -aG kvm ansible; sudo usermod -aG libvirt ansible;

- name: Installing Docker
  hosts: homelab
  strategy: free
  tasks:
    - name: Checking if Docker is Already Installed
      shell: if sudo systemctl list-units --full -all | grep -Fq "docker"; then echo "true"; else echo "false"; fi;
      register: docker_installed

    - name: Creating Docker Keyring Directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: docker_installed == "false"

    - name: Downloading Docker Keyring
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      when: docker_installed == "false"

    - name: Adding Docker to Keyring
      shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      when: docker_installed == "false"

    - name: Giving Permissions to Docker Keyring
      shell: sudo chmod a+r /etc/apt/keyrings/docker.gpg
      when: docker_installed == "false"
      
    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;
      when: docker_installed == "false"
      
    - name: Updating Ubuntu Apt Cache
      become: yes
      apt:
        update_cache: yes
        force_apt_get: yes
      when: docker_installed == "false"
             
    - name: Installing Docker
      become: yes
      apt: 
        name: 
          - docker-ce 
          - docker-ce-cli  
          - containerd.io  
          - docker-compose-plugin
        state: present
      when: docker_installed == "false"

- name: Installing Kubernetes
  hosts: homelab
  strategy: free
  tasks:
    - name: Checking if Kubernetes is Already Installed
      shell: if sudo systemctl list-units --full -all | grep -Fq "kubectl"; then echo "true"; else echo "false"; fi;
      register: kubernetes_installed

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none
      when: kubernetes_installed == "false"

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0 and kubernetes_installed == "false"

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      when: kubernetes_installed == "false"

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list
      when: kubernetes_installed == "false"

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl
      when: kubernetes_installed == "false"

- name: Installing Vagrant
  hosts: homelab
  strategy: free
  tasks:
    - name: Checking if Vagrant is Already Installed
      shell: if sudo systemctl list-units --full -all | grep -Fq "vagrant"; then echo "true"; else echo "false"; fi;
      register: vagrant_installed

    - name: Downloading Vagrant Keyring
      shell: wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
      when: vagrant_installed == "false"

    - name: Adding Vagrant to Keyring
      shell: echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
      when: vagrant_installed == "false"

    - name: Giving Permissions to Vagrant Keyring
      shell: sudo chmod a+r /usr/share/keyrings/hashicorp-archive-keyring.gpg
      when: vagrant_installed == "false"
      
    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;
      when: vagrant_installed == "false"
      
    - name: Updating Ubuntu Apt Cache
      become: yes
      apt:
        update_cache: yes
        force_apt_get: yes
      when: vagrant_installed == "false"
             
    - name: Installing Vagrant
      become: yes
      apt: 
        name: 
          - vagrant
        state: present
      when: vagrant_installed == "false"

- name: Installing Cockpit
  hosts: homelab
  strategy: free
  tasks:
    - name: Checking if Cockpit is Already Installed
      shell: if sudo systemctl list-units --full -all | grep -Fq "cockpit.socket"; then echo "true"; else echo "false"; fi;
      register: cockpit_installed

    - name: Print return information from the previous task
      ansible.builtin.debug:
        var: cockpit_installed
        verbosity: 4

    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;
      when: cockpit_installed == "false"
  
    - name: Downloading Docker Cockpit Plugin
      shell: wget https://launchpad.net/ubuntu/+source/cockpit/215-1~ubuntu19.10.1/+build/18889196/+files/cockpit-docker_215-1~ubuntu19.10.1_all.deb && sudo apt install -y ./cockpit-docker_215-1~ubuntu19.10.1_all.deb
      when: cockpit_installed == "false"
             
    - name: Installing Cockpit
      become: yes
      apt: 
        name: 
          - cockpit  
          - cockpit-machines  
          - cockpit-podman  
          - cockpit-system  
          - cockpit-bridge  
          - cockpit-storaged  
          - cockpit-networkmanager
        state: present
      when: cockpit_installed == "false"

    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell: sudo systemctl start cockpit.socket; sudo systemctl enable --now cockpit.socket
      when: cockpit_installed == "false"
      
      
- name: Cleaning System
  hosts: homelab
  strategy: free
  tasks:
    - name: Emptying Trash
      become: yes
      shell:  trash-empty
    
    - name: Waiting for DPKG to be Unlocked
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

    - name: Cleaning Apt
      become: yes
      apt:
        clean: true 

    - name: Autoremoving Apt Packages
      become: yes
      apt:
        autoremove: true

    - name: Cleaning Docker
      become: yes
      shell: sudo docker system prune --all --volumes --force
